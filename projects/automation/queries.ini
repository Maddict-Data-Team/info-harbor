[Setup]
radius_query = SELECT 
    distinct(radius)
    FROM {project}.{footfall_dataset}.{codename}_pois

query_metadata = Select end_date, type, country, time_interval, last_update, backend_report, segments,start_date
    FROM {project}.{metadata_dataset}.{campaign_tracker_table}
    WHERE code_name = {codename}

update_last_update = UPDATE `{project}.{metadata_dataset}.{campaign_tracker_table}`
    Set last_update = "{new_last_update}"
    where code_name = {codename}
[Common Queries]
queries = home_graph,travel_distance,travel_distance_km,dwell_time,loyalist_vs_onetime,device_os,employee_vs_visitor,behavior,socioeco
    
device_os = Select distinct did, Device_os_id
    from {project}.{location_signals_dataset}.{device_os_mapping_table}
    where did in (SELECT DID from {project}.{footfall_dataset}.{codename}_visitors)

home_graph = Select * 
    from `{project}.{hwg_dataset}.{hwg_table}`
    where did in (select distinct(did) from {project}.{footfall_dataset}.{codename}_visitors)

behavior = Select DID,Behavior_ID,Behavior_name 
    from `{project}.POI_DB_{country_beh}.Behavioral_{country}_RAW_Cumulative`
    where did in (select distinct(did) from {project}.{footfall_dataset}.{codename}_visitors)
    Union ALL
    Select distinct DID,87,"HNWI" from {project}.Recurring_Segments.{country}_HNWI
    where did in (select distinct(did) from {project}.{footfall_dataset}.{codename}_visitors)

travel_distance = SELECT
    distinct(hg.DID),
    ST_DISTANCE(ST_GEOGPOINT(poi.longitude,poi.latitude),ST_GEOGPOINT(hg.long1,hg.lat1)) AS travel_distance
    FROM `{project}.{footfall_dataset}.{codename}_home_graph` AS hg
    JOIN (Select distinct did,poi_id from `{project}.{footfall_dataset}.{codename}_visitors`) AS vis
    ON vis.did = hg.did
    JOIN `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON vis.POI_ID = poi.poi_ID
    
loyalist_vs_onetime=SELECT
     did,
     poi_id,
     "Loyalists" AS Type
    FROM (
     SELECT
      COUNT(DISTINCT(local_day)) AS days_visited,
      did,
      poi_id
     FROM
      `{project}.{footfall_dataset}.{codename}_visitors`
     GROUP BY
      did,
      poi_id)
    WHERE
     days_visited > 1
    GROUP BY
    did,
     poi_id
    UNION ALL
    SELECT
     did,
     poi_id,
     "One time" AS Type
    FROM (
     SELECT
      COUNT(DISTINCT(local_day)) AS days_visited,
      did,
      poi_id
     FROM
      `{project}.{footfall_dataset}.{codename}_visitors`
     GROUP BY
      did,
      poi_id)
    WHERE
     days_visited = 1
    GROUP BY
    did,
     poi_id

employee_vs_visitor =SELECT
    DISTINCT did,
    "Employee" AS type,
    POI_ID
  FROM (
    SELECT
      COUNT(DISTINCT(local_day)) AS days_seen,
      lu_date.week,
      did,
      POI_ID
    FROM
      `{project}.{footfall_dataset}.{codename}_visitors` AS vis
    JOIN
      `{project}.Lookups.lu_date` AS lu_date
    ON
      Local_Day = lu_date.date
    GROUP BY
      lu_date.week,
      did,
      POI_ID )
  GROUP BY
    did,
    POI_ID
  HAVING
    MAX(days_seen)>=5
  UNION ALL
  SELECT
    DISTINCT did,
    "Employee" AS type,
    POI_ID
  FROM (
    SELECT
      COUNT(DISTINCT(local_day)) AS days_seen,
      lu_date.week,
      did,
      POI_ID
    FROM
      `{project}.{footfall_dataset}.{codename}_visitors` AS vis
    JOIN
      `{project}.Lookups.lu_date` AS lu_date
    ON
      Local_Day = lu_date.date
    GROUP BY
      lu_date.week,
      did,
      POI_ID )
  GROUP BY
    did,
    POI_ID
  HAVING
    MAX(days_seen)<5


socioeco = SELECT
    distinct(did),
    1 AS Economic_Status,
    FROM
    `{project}.{footfall_dataset}.{codename}_visitors` AS VIS
    WHERE
    did IN (
    SELECT
    did
    FROM
    `{project}.{footfall_dataset}.{codename}_behavior` AS BEH
    JOIN 
        `{project}.{footfall_dataset}.{lookup_behavior_table}` as IL
        on BEH.Behavior_ID = IL.Behavior_ID
    WHERE 
    IL.Behavior_Name = 'HNWI')

    UNION ALL

    SELECT
    distinct(did),
    2 AS Economic_Status,
    FROM
    `{project}.{footfall_dataset}.{codename}_visitors` AS VIS
    WHERE
    did IN (
    SELECT
    did
    FROM
    `{project}.{footfall_dataset}.{codename}_behavior` AS BEH
    JOIN 
        `{project}.{footfall_dataset}.Lookup_Behavior` as IL
        on BEH.Behavior_ID = IL.Behavior_ID
    WHERE
    IL.Behavior_Name = 'Luxurious Lifestyle')

    and did NOT IN (
    SELECT
    did
    FROM
    `{project}.{footfall_dataset}.{codename}_behavior` AS BEH
    JOIN 
        `{project}.{footfall_dataset}.Lookup_Behavior` as IL
        on BEH.Behavior_ID = IL.Behavior_ID
    WHERE
    IL.Behavior_Name = 'HNWI')

    UNION ALL

    SELECT 
    distinct(did), 
    3 AS Economic_Status,
    FROM
    `{project}.{footfall_dataset}.{codename}_visitors` AS VIS
    WHERE
    did NOT IN (
    SELECT
    did
    FROM
    `{project}.{footfall_dataset}.{codename}_behavior` AS BEH
    JOIN 
        `{project}.{footfall_dataset}.Lookup_Behavior` as IL
        on BEH.Behavior_ID = IL.Behavior_ID
    WHERE
    IL.Behavior_Name in ('Luxurious Lifestyle','HNWI'))


dwell_time = SELECT
    did ,
    (MAX(local_hour)-MIN(local_hour)) AS dwell_time,
    poi_id,
    local_day
    FROM
    `{project}.{footfall_dataset}.{codename}_visitors`
    GROUP BY
    local_day,
    did,
    poi_id
    HAVING
    max(local_hour) != MIN(Local_hour)
    and dwell_time < 6 

travel_distance_km = SELECT 
    distinct(did),
    CASE
    WHEN travel_distance_km BETWEEN 0 AND 5 THEN '0 - 5 km'
    WHEN travel_distance_km BETWEEN 5 AND 10 THEN '5 - 10 km'
    WHEN travel_distance_km BETWEEN 10 AND 15 THEN '10 - 15 km'
    WHEN travel_distance_km BETWEEN 15 AND 20 THEN '15 - 20 km'
    WHEN travel_distance_km BETWEEN 20 AND 25 THEN '20 - 25 km'
    WHEN travel_distance_km BETWEEN 25 AND 30 THEN '25 - 30 km'
    WHEN travel_distance_km BETWEEN 30 AND 35 THEN '30 - 35 km'
    WHEN travel_distance_km BETWEEN 35 AND 40 THEN '35 - 40 km'
    WHEN travel_distance_km BETWEEN 40 AND 45 THEN '40 - 45 km'
    WHEN travel_distance_km BETWEEN 45 AND 50 THEN '45 - 50 km'
    ELSE '50+ km'
    END AS distance_category

    FROM (
    SELECT 
        did,
    (travel_distance / 1000) AS travel_distance_km

    FROM `{project}.{footfall_dataset}.{codename}_travel_distance`
    ) AS subquery


[Retail]
queries = visitors,common_queries,visitors_in_competitors
visitors=SELECT
    ls.did,
    ls.Local_Day,
    ls.Timestamp,
    ls.Local_Hour,
    ls.Longitude,
    ls.latitude,
    ls.Local_time,
    poi.POI_ID,
    0 as Data_filter
    FROM
    `{project}.{location_signals_dataset}.{country}_Data` AS ls
    JOIN
    `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
    ST_DISTANCE(ST_GEOGPOINT(ls.Longitude,ls.latitude),ST_GEOGPOINT(poi.longitude,poi.latitude))<{radius}
    WHERE
    ls.timestamp Between "{start_date_q}" AND "{end_date_q}"
    and poi.radius={radius}


visitors_in_competitors = Select distinct(yl.did),com.poi_ID 
    from `{project}.{footfall_dataset}.{codename}_visitors` as yl 
    join (
    
    Select did,vis.poi_id from `{project}.{footfall_dataset}.{codename}_visitors`  as vis
    join `{project}.{footfall_dataset}.{codename}_pois` as poi
    on vis.poi_id = poi.poi_id 
    where poi.data_filter = 2) as com 
    on yl.did = com.did
    join `{project}.{footfall_dataset}.{codename}_pois` as poi
    on yl.poi_id = poi.poi_id
    where poi.data_filter = 1 

    UNION ALL

    Select distinct(yl.did),yl.poi_ID 
    from `{project}.{footfall_dataset}.{codename}_visitors` as yl 
    join (Select did,vis.poi_id from `{project}.{footfall_dataset}.{codename}_visitors`  as vis
    join `{project}.{footfall_dataset}.{codename}_pois` as poi
    on vis.poi_id = poi.poi_id 
    where poi.data_filter = 2) as com
    on yl.did = com.did
    join `{project}.{footfall_dataset}.{codename}_pois` as poi
    on yl.poi_id = poi.poi_id
    where poi.data_filter = 1 

[Placelift]
queries = visitors,common_queries,footfall,reaction_time,share_of_volume



visitors = SELECT
    ls.did,
    ls.Local_Day,
    ls.Timestamp,
    ls.Local_Hour,
    ls.Longitude,
    ls.latitude,
    ls.Local_time,
    poi.POI_ID,
    0 AS Data_filter,
    seg.controlled
    FROM
    `{project}.{location_signals_dataset}.{country}_Data` AS ls
    JOIN
    `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
    ST_DISTANCE(ST_GEOGPOINT(ls.Longitude,ls.latitude),ST_GEOGPOINT(poi.longitude,poi.latitude))<{radius}
    JOIN
    `{project}.{Campaign_segments_dataset}.{codename}_Segments` AS seg
    ON
    seg.did = ls.did
    WHERE
    ls.timestamp BETWEEN "{start_date_q}"
    AND "{end_date_q}"
    and poi.radius={radius}
    AND ls.did IN (
    SELECT
        DISTINCT(devraw)
    FROM
        `{project}.{back_end_report_dataset}.{codename}`
    UNION ALL
    SELECT
        did
    FROM
        `{project}.{Campaign_segments_dataset}.{codename}_Segments`
    WHERE
        Controlled = TRUE )



footfall = SELECT
    visitors_count,
    uniques_count,
    uniques.controlled,
    CASE
    WHEN uniques.controlled THEN 'Controlled'
    ELSE 'Exposed'
    END AS controlled_str,
    (visitors_count/uniques_count) as Conversion_Rate
  FROM (
    SELECT
      COUNT(DISTINCT(vis.did)) AS visitors_count,
      seg.controlled
    FROM
      `{project}.{footfall_dataset}.{codename}_visitors` AS vis
    JOIN
      `{project}.{Campaign_segments_dataset}.{codename}_Segments` AS seg
    ON
      vis.did = seg.DID
    GROUP BY
      seg.controlled) AS visitors
  JOIN (
    SELECT
      COUNT(DISTINCT(did)) AS uniques_count,
      controlled
    FROM (
      SELECT
        did,
        controlled
      FROM
        `{project}.{Campaign_segments_dataset}.{codename}_Segments` AS seg
      where controlled = true
      UNION ALL
      SELECT
        did,
        controlled
      FROM
        `{project}.{back_end_report_dataset}.{codename}` AS vis
      JOIN
        `{project}.{Campaign_segments_dataset}.{codename}_Segments` AS seg
      ON
        vis.devraw = seg.DID 
      WHERE 
        vis.timestamp < "{end_date_q}"
        )
    GROUP BY
      controlled )AS uniques
  ON
    visitors.controlled = uniques.controlled



reaction_time = SELECT
  DISTINCT devraw,
  DATE_DIFF(MIN(v.Local_Time), MIN(e.timestamp), day) AS daydiff
  FROM
      `{project}.{back_end_report_dataset}.{codename}` AS e
  JOIN
      `{project}.{footfall_dataset}.{codename}_visitors` AS v
  ON
      devraw=DID
    where v.controlled = false
  GROUP BY
      devraw
  HAVING
      daydiff >=0 


share_of_volume = SELECT
  Count_uniques,
  serv.segment,
  Count_total,
  (Count_uniques/Count_total) AS Share_of_Volume
  FROM (
    SELECT
      COUNT(DISTINCT(devraw)) AS Count_uniques,
      seg.segment
    FROM
      `{project}.{back_end_report_dataset}.{codename}` AS ber
    JOIN
      `{project}.{Campaign_segments_dataset}.{codename}_Segments` AS seg
    ON
      seg.did = ber.devraw
    GROUP BY
      segment) AS serv
  JOIN (
    SELECT
      COUNT(DISTINCT(did)) AS Count_total,
      seg.segment
    FROM
      `{project}.{Campaign_segments_dataset}.{codename}_Segments` AS seg
    GROUP BY
      segment) AS total
  ON
    total.segment = serv.segment
  WHERE
    serv.segment !="Controlled"


[Placelift No BER]


queries = visitors,common_queries



visitors = SELECT
    ls.did,
    ls.Local_Day,
    ls.Timestamp,
    ls.Local_Hour,
    ls.Longitude,
    ls.latitude,
    ls.Local_time,
    poi.POI_ID,
    0 AS Data_filter,
    seg.controlled
    FROM
    `{project}.{location_signals_dataset}.{country}_Data` AS ls
    JOIN
    `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
    ST_DISTANCE(ST_GEOGPOINT(ls.Longitude,ls.latitude),ST_GEOGPOINT(poi.longitude,poi.latitude))<{radius}
    JOIN
    `{project}.{Campaign_segments_dataset}.{codename}_Segments` AS seg
    ON
    seg.did = ls.did
    WHERE
    ls.timestamp BETWEEN "{start_date_q}"
    AND "{end_date_q}"
    and poi.radius={radius}
     


[Placelift No Segments]

queries = visitors,common_queries,visitors_before,footfall



visitors = SELECT
    ls.did,
    ls.Local_Day,
    ls.Timestamp,
    ls.Local_Hour,
    ls.Longitude,
    ls.latitude,
    ls.Local_time,
    poi.POI_ID,
    0 AS Data_filter
    FROM
    `{project}.{location_signals_dataset}.{country}_Data` AS ls
    JOIN
    `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
    ST_DISTANCE(ST_GEOGPOINT(ls.Longitude,ls.latitude),ST_GEOGPOINT(poi.longitude,poi.latitude))<{radius}
    WHERE
    ls.timestamp BETWEEN "{start_date_q}"
    AND "{end_date_q}"
    and poi.radius={radius}


visitors_before = SELECT
    ls.did,
    ls.Local_Day,
    ls.Timestamp,
    ls.Local_Hour,
    ls.Longitude,
    ls.latitude,
    ls.Local_time,
    poi.POI_ID,
    0 AS Data_filter
    FROM
    `{project}.{location_signals_dataset}.{country}_Data` AS ls
    JOIN
    `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
    ST_DISTANCE(ST_GEOGPOINT(ls.Longitude,ls.latitude),ST_GEOGPOINT(poi.longitude,poi.latitude))<{radius}
    WHERE
    ls.timestamp BETWEEN "{start_date_before}"
    AND "{end_date_before}"
    and poi.radius={radius}


footfall = SELECT
    count_during,
    count_before,
    ((count_during-count_before)/count_before) AS uplift,
    'Total' AS type,
    during.poi_name
  FROM (
    SELECT
      SUM(count_during) AS count_during,
      poi_name
    FROM (
      SELECT
        COUNT(DISTINCT(local_day)) AS count_during,
        did,
        poi.poi_name
      FROM
        `{project}.{footfall_dataset}.{codename}_visitors` AS vis
      JOIN
        `{project}.{footfall_dataset}.{codename}_pois` AS poi
      ON
        vis.poi_id = poi.poi_id
      GROUP BY
        poi.poi_name,
        did )
    GROUP BY
      poi_name ) AS during
  JOIN (
    SELECT
      SUM(count_before) AS count_before,
      poi_name
    FROM (
      SELECT
        COUNT(DISTINCT(local_day)) AS count_before,
        did,
        poi.poi_name
      FROM
        `{project}.{footfall_dataset}.{codename}_visitors_before` AS vis
      JOIN
        `{project}.{footfall_dataset}.{codename}_pois` AS poi
      ON
        vis.poi_id = poi.poi_id
      GROUP BY
        poi.poi_name,
        did )
    GROUP BY
      poi_name ) AS before
  ON
    during.poi_name = before.poi_name
  UNION ALL
  SELECT
    count_during,
    count_before,
    ((count_during-count_before)/count_before) AS uplift,
    "Uniques" AS type,
    during.poi_name
  FROM (
    SELECT
      COUNT(DISTINCT(did)) AS count_during,
      poi.poi_name
    FROM
      `{project}.{footfall_dataset}.{codename}_visitors` AS vis
    JOIN
      `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
      vis.poi_id = poi.poi_id
    GROUP BY
      poi.poi_name ) AS during
  JOIN (
    SELECT
      COUNT(DISTINCT(did)) AS count_before,
      poi.poi_name
    FROM
      `{project}.{footfall_dataset}.{codename}_visitors_before` AS vis
    JOIN
      `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
      vis.poi_id = poi.poi_id
    GROUP BY
      poi.poi_name ) AS before
  ON
    during.poi_name = before.poi_name

[OOH]

queries = visitors,common_queries,visitors_before,footfall,footfall_week,overlap_ooh



visitors = SELECT
    ls.did,
    ls.Local_Day,
    ls.Timestamp,
    ls.Local_Hour,
    ls.Longitude,
    ls.latitude,
    ls.Local_time,
    poi.POI_ID,
    0 AS Data_filter
    FROM
    `{project}.{location_signals_dataset}.{country}_Data` AS ls
    JOIN
    `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
    ST_DISTANCE(ST_GEOGPOINT(ls.Longitude,ls.latitude),ST_GEOGPOINT(poi.longitude,poi.latitude))<{radius}
    WHERE
    ls.timestamp BETWEEN "{start_date_q}"
    AND "{end_date_q}"
    and poi.radius={radius}


visitors_before = SELECT
    ls.did,
    ls.Local_Day,
    ls.Timestamp,
    ls.Local_Hour,
    ls.Longitude,
    ls.latitude,
    ls.Local_time,
    poi.POI_ID,
    0 AS Data_filter
    FROM
    `{project}.{location_signals_dataset}.{country}_Data` AS ls
    JOIN
    `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
    ST_DISTANCE(ST_GEOGPOINT(ls.Longitude,ls.latitude),ST_GEOGPOINT(poi.longitude,poi.latitude))<{radius}
    WHERE
    ls.timestamp BETWEEN "{start_date_before}"
    AND "{end_date_before}"
    and poi.radius={radius}


footfall = SELECT
    count_during,
    count_before,
    ((count_during-count_before)/count_before) AS uplift,
    'Total' AS type,
    during.poi_name
  FROM (
    SELECT
      SUM(count_during) AS count_during,
      poi_name
    FROM (
      SELECT
        COUNT(DISTINCT(local_day)) AS count_during,
        did,
        poi.poi_name
      FROM
        `{project}.{footfall_dataset}.{codename}_visitors` AS vis
      JOIN
        `{project}.{footfall_dataset}.{codename}_pois` AS poi
      ON
        vis.poi_id = poi.poi_id
      GROUP BY
        poi.poi_name,
        did )
    GROUP BY
      poi_name ) AS during
  JOIN (
    SELECT
      SUM(count_before) AS count_before,
      poi_name
    FROM (
      SELECT
        COUNT(DISTINCT(local_day)) AS count_before,
        did,
        poi.poi_name
      FROM
        `{project}.{footfall_dataset}.{codename}_visitors_before` AS vis
      JOIN
        `{project}.{footfall_dataset}.{codename}_pois` AS poi
      ON
        vis.poi_id = poi.poi_id
      GROUP BY
        poi.poi_name,
        did )
    GROUP BY
      poi_name ) AS before
  ON
    during.poi_name = before.poi_name
  UNION ALL
  SELECT
    count_during,
    count_before,
    ((count_during-count_before)/count_before) AS uplift,
    "Uniques" AS type,
    during.poi_name
  FROM (
    SELECT
      COUNT(DISTINCT(did)) AS count_during,
      poi.poi_name
    FROM
      `{project}.{footfall_dataset}.{codename}_visitors` AS vis
    JOIN
      `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
      vis.poi_id = poi.poi_id
    GROUP BY
      poi.poi_name ) AS during
  JOIN (
    SELECT
      COUNT(DISTINCT(did)) AS count_before,
      poi.poi_name
    FROM
      `{project}.{footfall_dataset}.{codename}_visitors_before` AS vis
    JOIN
      `{project}.{footfall_dataset}.{codename}_pois` AS poi
    ON
      vis.poi_id = poi.poi_id
    GROUP BY
      poi.poi_name ) AS before
  ON
    during.poi_name = before.poi_name


overlap_ooh=WITH campaign_start AS (
      -- Get the minimum local_day (campaign start date) from the visitors table
      SELECT MIN(v.local_day) AS start_date
      FROM {project}.{footfall_dataset}.{codename}_visitors v
  ),
  common_dids AS (
      -- Find common DID values between the two tables
      SELECT DISTINCT v.did
      FROM {project}.{footfall_dataset}.{codename}_visitors v
      INNER JOIN {project}.{footfall_dataset}.{codename}_streach br
      ON v.did = br.devraw
  ),
  daily_totals AS (
      -- Calculate daily counts for common DIDs, backend DIDs, and visitor DIDs
      SELECT 
          v.local_day AS local_day,
          COUNT(DISTINCT cd.did) AS daily_common,
          (SELECT COUNT(DISTINCT devraw) FROM {project}.{footfall_dataset}.{codename}_streach WHERE local_day = v.local_day) AS daily_backend,
          (SELECT COUNT(DISTINCT did) FROM {project}.{footfall_dataset}.{codename}_visitors WHERE local_day = v.local_day) AS daily_visitors
      FROM {project}.{footfall_dataset}.{codename}_visitors v
      LEFT JOIN common_dids cd ON v.did = cd.did
      GROUP BY v.local_day
  ),
  week_groups AS (
      -- Create week groups based on the campaign start date for common DIDs
      SELECT 
          dt.local_day,
          DATE_DIFF(dt.local_day, cs.start_date, DAY) AS day_diff,
          DIV(DATE_DIFF(dt.local_day, cs.start_date, DAY), 7) + 1 AS relative_week,
          dt.daily_common,
          dt.daily_backend,
          dt.daily_visitors
      FROM daily_totals dt
      CROSS JOIN campaign_start cs
  ),
  distinct_weeks AS (
      -- Get distinct weeks for the common DIDs
      SELECT DISTINCT relative_week
      FROM week_groups
      ORDER BY relative_week
      LIMIT 7
  ),
  positive_weeks AS (
      -- Calculate the count of DIDs and the overlap percentage for each positive week
      SELECT 
          CONCAT('W', CAST(dw.relative_week AS STRING)) AS custom_week_label,
          SUM(wg.daily_common) AS did_count,
          dw.relative_week AS order_column,
          SAFE_DIVIDE(SUM(wg.daily_common), SUM(wg.daily_visitors))  AS overlap_percentage,
          SUM(wg.daily_common) AS total_common,
          SUM(wg.daily_backend) AS total_backend,
          SUM(wg.daily_visitors) AS total_visitors,
          (SELECT SAFE_DIVIDE(SUM(daily_common), SUM(daily_visitors))  FROM week_groups) AS custom_calculation
      FROM distinct_weeks dw
      JOIN week_groups wg ON dw.relative_week = wg.relative_week
      GROUP BY dw.relative_week
  )

  -- Final output with positive weeks and overlap percentages
  SELECT 
      custom_week_label,
      did_count,
      order_column,
      overlap_percentage,
      total_common,
      total_backend,
      total_visitors,
      custom_calculation
  FROM positive_weeks

  UNION ALL

  -- Generate negative weeks with zero counts and negative order values
  SELECT 
      CONCAT('-W', CAST(dw.relative_week AS STRING)) AS custom_week_label,
      0 AS did_count,
      -dw.relative_week AS order_column,
      0 AS overlap_percentage,
      0 AS total_common,
      0 AS total_backend,
      0 AS total_visitors,
      (SELECT SAFE_DIVIDE(SUM(daily_common), SUM(daily_visitors)) FROM week_groups) AS custom_calculation
  FROM distinct_weeks dw

  ORDER BY order_column;


footfall_week=WITH campaign_start AS (
      SELECT MIN(local_day) AS start_date
      FROM {project}.{footfall_dataset}.{codename}_visitors
  ),
  week_groups AS (
      SELECT
          date,
          DATE_DIFF(date, cs.start_date, DAY) AS day_diff,
          DIV(DATE_DIFF(date, cs.start_date, DAY), 7) + 1 AS relative_week
      FROM {project}.Lookups.lu_date, campaign_start cs
      WHERE date >= cs.start_date
  ),
  distinct_weeks AS (
      SELECT DISTINCT relative_week
      FROM week_groups
      ORDER BY relative_week
      LIMIT 4  -- Ensure only 7 weeks are generated
  ),
  visitor_weeks AS (
      SELECT
          v.DID,
          DIV(DATE_DIFF(v.local_day, cs.start_date, DAY), 7) + 1 AS relative_week
      FROM {project}.{footfall_dataset}.{codename}_visitors v, campaign_start cs
  )
  -- Generate positive weeks and their counts
  SELECT
      CONCAT('W', CAST(dw.relative_week AS STRING)) AS custom_week_label,
      COUNT(DISTINCT vw.DID) AS did_count,
      dw.relative_week AS order_column
  FROM distinct_weeks dw
  LEFT JOIN visitor_weeks vw
  ON dw.relative_week = vw.relative_week
  GROUP BY dw.relative_week
  UNION ALL
  -- Generate exactly 7 negative weeks with zero counts and negative order values
  SELECT
      CONCAT('-W', CAST(dw.relative_week AS STRING)) AS custom_week_label,
      0 AS did_count,
      -dw.relative_week AS order_column  -- Negative week order
  FROM distinct_weeks dw
  ORDER BY order_column;

